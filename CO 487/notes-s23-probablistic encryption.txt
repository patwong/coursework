[CO 487 - S23 - probabilistic encryption]
elgamal
- choose globally public prime p
- choose globally public element g in Z*_p of large order

key generation
- pick random x in Z s.t. 1 < x < p-1
kpub: g^x mod p, kpriv: x

encryption
- pick random r in Z s.t. 1 < r < p-1
E(m,g^x,r) = (g^r,m*g^xr mod p)

decryption
- (c1,c2)
D(c) = (c1^-1)^x * c2 mod p

[summary]
elgamal = public key diffie-hellman
g^x: public key, for fixed x
- aka "long-term key"
ciphertext (g^r, m*g^xr) for random r
- g^r: ephemeral key
- g^xr shared secret
variations: m + g^xr, m XOR g^xr


[semantic security]
elgamal is semantically secure
- given g, g^x, g^r, m = 1. cannot determine if c = g^xr
- why? because don't know x or => cannot compute g^xr

DDH: given p, g, g^x, g^y, g^z, computationally infeasible to determine whether or not g^z = g^xy

theorem: elgamal is semantically secure under chosen-plaintext attack (IND-CPA) if and only if DDH holds
=> if elgamal is semantically secure, we use above facts (e.g. m = 1, gx, gy, etc.). we cannot compute g^xy since infeasible. 

[semantic insecurity]
if g is generator, DDH doesn't hold.
*x is unknown, but doesn't matter. we have p, we can get p-1.
since g is generator, then g^(p-1) congruent 1 mod p
let x = 2k, then
=> (g^x)^(p-1)/2 => (g^p-1)^x/2 => (g^p-1)^k => 1^k (mod p)
if x = 2k+1
... (g^p-1)^k+0.5 => (g^p-1)^k * (g^p-1)^1/2 => .. congruent 1 *(g^p-1)^1/2 !congruent 1 (mod p)

==> thus can determine if x is even or odd
=> if 1, then x even, otherwise x is odd


if z and xy have same parity, foregoing computation no information
- what is z? assuming x,y correspond to x and r in elgamal



















