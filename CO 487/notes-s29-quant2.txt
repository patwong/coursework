[dump]
quantum computation
main topics
1. quantum key distribution
2. quantum computation
3. post-quantum cryptography

mechanics
uncertainty principle: no way to determine a quantum state without measuring it
quantum superposition: prior to measurement, all possible states of an object exist simultaneously
quantum entanglement: in an entangled pair, measuring one object constraints the possible states for the other object
- the unmeasured object's state must be consistent with the first object's measurement

quantum computation
-  quantum computers operate on entangled particles("qubits")
	qubit: simultaneously 0 and 1
	- set of n qubits ranges simultaneously from 0 to 2^n - 1
- for any function f:
	- on  classical computer, computing f(0),f(1),...,f(2^n-1) requires 2^n operations
	- quantum computer: f(0)...f(2^n-1) requires one operation
- unfortunately, extracting results of the computation requires a measurement, which yields only one output

quantum algorithms
grover's: inverts any function f: n -> A in 2^n/2
shor's: factors integers and finds discrete logarithms in a polynomial number of quantum operations

grover's
- bruce force attack against a k-bit key requires O(2^k/2) quantum operations
- collisions in k-bit hash functions require O(2^k/4) quantum operations
- attack paplies to symmetric-key encryption schemes, MAC schemes, and hash functions
- generally, doubling the key length restores security

shor's algorithm
- breaks rsa, diffie-hellman, elgamal, dsa, ecc

shor's example
- factor N = 21
- choose Q s.t. N^2 <= 2^Q <= 2N^2
- pick x with 2 <= x <= N - 1, gcd(x,N) = 1 (otherwise, x is factor of N)
- suppose x = 2. goal: find order of x, i.e. smallest r s.t. 2^r cong 1 (mod N)
	- equivalent to factoring N
- initialize superposition of 

e.g. want to factor N = 21
- choose Q s.t. N^2 <= 2^Q <= 2N^2 (Q = 9)
- pick random x with 2 <= x <= N - 1 and gcd(x,N) = 1 (if GCD != 1, have factor of N)
- suppose x = 2. goal: find order of x, i.e. smallest r s.t. 2^r congruent 1 (mod N). equivalent to factoring N
	- with very high probability, floor(N/r)*r = phi(N) = (p-1)(q-1)
	- given phi(N), N, can solve p and q using algebra
	N = pq, phi(N) = (p-1)(q-1) = pq - p - q + 1 => N - phi(N) - 1 = (p+q)
	(x - p)(x - q) = x^2 - (p+q)x + pq
	=> get the roots
- initialize superposition of {0,...,2^Q - 1}
- compute all values of 2^j mod n, for j = 0...2^Q-1

measure output state first
<diagram: six outputs, divided on six registers>
suppose we measure the second register and get |2>

last step: fourier transform
- plots frequencies which occur in input distribution

1. peaks in PDF are observed at intervals 0, 85, 171,..,427
2. up to a phase shift, peaks are multiples of 2^Q/r
3. phase shift is at most r, which is smaller than 2^Q
4. suppose we measured 85. divide by 512 to get 85/512
5. 85/512 is very close to some fraction c/r for some r << 512
	use continued fractions to find c and r
	85/512 = 1 / (...)
6. convergents of 85/512 are 1/6, 42/253,85/512
7.

[ALGORITHM]
to factor N:
1. choose Q s.t. N^2 <= 2^Q <= 2N^2 (usually Q is unique)
2. choose x in Z*_n
3. compute quantum state
4. apply quantum fourier transform to quantum state
5. measure the 2nd register, discard result
6. measure first register, let z denote its value	<- in our assn, z is r
7. then z/2^Q is very close to c/r for some c
=> this r can then be used for floor(N/r)*r to get phi(n)









