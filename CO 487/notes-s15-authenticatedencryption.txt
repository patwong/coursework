[CO 487 - S15 - Authenticated Encryption]
MAC-then-encrypt
- MAC the message, append to end of message m, encrypt c = E(m||t), send c

Encrypt-then-MAC
- c = E(m), t = MAC(E(m)), send c||t

Encrypt-and-MAC
- c = E(m), t = MAC(m), send c||t

[security goals]
integrity of plaintext (INT-PTXT)
- produce a valid ciphertext (i.e. one that passes all authentication checks) containing an encryption of a plaintxt message that was never sent by the legitimate user

integrity of ciphertext (INT-CTXT)
- produce a valid ciphertext (i.e. one that passes all authentication checks) that was never sent by the legitimate user

**djao
INT-PTXT in context of a CPA (only context used) means adversary cannot produce a valid ciphertext c such that D(c) equals m for any m that was not one of the chosen plaintexts used in the chosen plaintext attack

similarly, INT-CTXT means that an adversary cannot produce a valid ciphertext c such that c was _not_ one of the ciphertext produced during the chosen plaintext attack
=> e.g. forge a different ctext of message sent before

[Encrypt-then-MAC]
M-t-E: confidentiality leaked - MAC doesn't confidentiality constraint
E-a-M: integrity leaked, SKES doesn't have preserve integrity constraint
- INT-CTXT violated

Ciphertext unforgeability: encryption scheme is CUF under a CUF-CPA if an attacker under following interactions cannot achieve the following goal:
- interaction: attacker may choose any number of messages m_i and obtain their corresponding valid (authenticated) encryptions c_i under the key k
- computation: attacker is computationally bounded
- goal: attacker must produce a valid (authenticated) encryption c != c_i (i.e. break INT-CTXT)

theorem: suppose SKES semantically secure under CPA, and MAC is EUF-CMA. then encrypt-then-MAC is semantically secure and CUF-CPA.

[cryptographic doom principle]
- if have to perform any cryptographic operation before verifying the MAC on a message you've received, it will somehow inevitably lead to doom