[CO 487 - A4]
[Q1]
you can parallelize the computation of Ci and inputs to A
the n Ci's can be sent to n CPUs along with a number, e.g. i
inputs to n cpus: pi, i, k, N
for every i cpu, can calculate a Ci => Ci = E(k,N||(c+i)) XOR Pi
	compute the i Ci*H^n-1 calculations
return (sub Ai, Ci)
central cpu multiplies by H, etc.

[Q1 - redo] S15 GCM additional notes
- need to parallelize over multiple CPU
- having central combination unit => bad?
- parallelize the H^n part -> think GF(x)		<=== HINT
- like modular exponentiation


96 bit nonce N
32 bit counter = 0_32
128 bit chunks of P1 ... Pn
Ci = E(K,N||(c+i)) (+) Pi,	n chunks
H = E(k,0_128)

A = ...
keys to parallelization:
H^n-i calculation - because big number in H
summation?

[q2]
want: x = DLOG_g(h)		=>		h = g^x
given l, f(l), q
we can compute p
we can compute g
now compute 


[q3]
steps
- compute z = b2 - b1, set all z's is 64 i.e. {0,...,63}
- compute all h(z)
- get all h(z) s.t. h(z) cong 0 (mod n)
- guess the values for all b1, b2
	- all b1, b2 upper bound of 63, low bound of 0
	-
- 

steps left: computing mod quickly
- how to get roots
- getting roots
- 























