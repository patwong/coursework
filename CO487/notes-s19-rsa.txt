[CO 487 - RSA encryption]
[rsa encryption scheme]
key generation:
- choose random primes p and q, with log2_p ~= log2_q ~= l/2
- compute n = pq and phi(n) = (p-1)(q-1)
- choose an integer e with 1 < e < phi(n) and gcd(e,phi(n)) = 1
- compute d = e^-1 mod phi(n). the public key (n,e) and the private key is (n,d)

message space:
M = C = Z*_n = {m in Z: 0 <= m < n and gcd(m,n) = 1}
encryption: E((n,e),m) = m^e mod n = c
decryption: D((n,d),c) = c^d mod n = m

[integers mod n]
notation:
a|b					: there is a k in Z s.t. ak = b
a cong b (mod n)	: n | (a-b) or (b-a)		*2nd option in djao rules
a mod n				: c in Zn s.t. n | (c-a)	a cong c (mod n) => n | (c-a)

[Modular arithmetic]
arithmetic in Zn is defined as follows:
a + b = (a+b) mod n
a - b = (a-b) mod n
a*b = (a*b) mod n
a/b = c where c in Zn is the unique element satisfying b*c = a in Zn, if such a unique element exists

remark: a/b  = a*(1/b) whenever either side is defined
remark: we sometimes write b^-1 instead of 1/b

[arithmetic in Zn]
+,-,* in Zn trivial
theorem: let a,b in Zn. then a/b is defined in Zn if and only if gcd(b,n) = 1. furthermore, when a/b is defined, there is an efficient algorithm to compute its value

pf: extended euclidean algorithm
e.g. 1/11 in Z_29
=> 8 cong 1/11 (mod 29) => 11*8 cong 1 (mod 29)

theorem: EEA requires at most 2*log2(n) table rows to compute 1/x in Zn

[rsa key generation]
to generate a RSA public/private key pair:
- choose random primes p and q s.t. log2(p) ~= log2(q) ~= 2^(l/2)
- compute n = pq, phi(n) = (p-1)(q-1)
- choose e s.t. 1 < e < phi(n), gcd(e,phi(n)) = 1	(public key)
- compute d = e^-1 in Z_phi(n)
	- use EEA to compute d
	- if EEA succeeds, then you are guaranteed that gcd(e,phi(n)) = 1
- public key (n,e)
- private key (n,d)

[rsa encryption and decryption]
efficiency, correctness?
- efficiency by modular exponentiation
- correctness proof later


[modular exponentiation]
for x^1000, x any number, it only takes 15 calculations to get the mod
* we ignore the calculation of mod as it is quick
get binary form of exponent
keep multiplying x^(2^i), where i = 1 is initial value. multiply the result by itself. can get 2^2, 2^3,... - every self multiplication increases the exponent by one
thus can reduce this to: 
	for i in z, some finite number
		x^(2^i+1) = x^(2^i)*x^(2^i)
		store x^(2^i+1)
	end
use stored values to compute m^e

** examples in physical scrap notes
e.g. m = 5, e = 1000
1 1 1 1 1 0 1 0 0 0
e = 2^9 + 2^8 + 2^7 + 2^6 + 2^5 + 2^3
m^3 = 5^(2^3)*5^(2^5)*5^(2^6)*5^(2^7)*5^(2^8)*5^(2^9)
start:
5^2^0 = 5
5^2^1 => 5^2^1 * 5^2^1 = 5^2(2^1) = 5^2^2 => 5^2^2 * 5^2^2 = 5^2(2^2) = 5^2^3 ... = 5^2^9
significantly less multiplications

theorem: 
the value of m^e mod n can be computed using at most 2log2(n) modular multiplications

[correctness of rsa]
let (n,e) be a RSA public key with private key (n,d). then D((n,d),E((n,e),m)) = m, for all m in Z_n s.t. gcd(m,n) = 1

[rsa proof]
step 4 of proof:
(m^p-1)^q-1 => we know that m^p-1 = 1 mod p
- why can we swap? 
	==> by FLT, a some natural number, p a prime, then a^(p-1) cong 1 (mod p)
	=> swap m^p-1 with 1 by this result

