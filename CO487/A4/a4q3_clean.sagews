︠494431a4-d5e9-49fb-8615-daaa75bcd263︠
e = 3
n = "b54400b5a0478403640d99116d42ff700732f863c6947417d6e4adbb8fbe139ca6fb6aedbc4d9ac4cdddc9de29fa2e581bd6a2b40f3488ec67b30bf5b74e62cd77af6f507a486d0c38256b52cfb1313b3f19c2ef10fa00dd91b9f50e137dc0efbc21d7d2dd6b45361b340e77e02703ab1cbee71c22975272c31b9db17c24f42f18fcfa55d96f6fb90ac3e62171ff622edcc550fd3d113f743ee9aad57dc4d6dcbee1c2caa3061991ebc6cdb6fdba77ae445d25f858669bca4176c8982149a27fe863c0110b1c55dcfe47d512fc2cf0bdd6959590318f4b09e1fc4b351f9b814a9a651414b674b3e81d5f1989874197c2e5cc83b06cd85e49d7440adb1aedf55f"
#c1, c2 are (m||ri)^e mod n
c1 = "7d0fbbdb918767a649a4adb65a951961a37e6438027b7d548ae7e663953c3be77b2a6de3e6a8df24b9d4ad233f2261f27f7971e69ce96236166c5153a145b053219ce556b17a19e2c69ab94a09215e95a89e0845224fc88b87c5125a782c15867a3b2aa1e56a6aea569ce8c5931b457f5590961232e1427b7acb8f1fa1ef893cb35f0368401f3eb4290dfac19e369ef2842be0f85cc56f02f59e638b4e8c4c0a3d523ccd904598a9a2d7ad9e18baaf3ae4ca71fe8daa468985d5ad0bc415748b5579f6f161568dfeda86baeb9cb48d2a8019f3d0cf5d9fa8532b6bbc97ce5a066977ce7d142c3acb1fa061120dcd176d1cf10c13df6e9ac46ae3765f3c76a206"
c2 = "9489dd06d49667973c434d00cab3c280de43f8fa45cea3a9b4f44ecd6eed669577c27e7e66c2bd13b8b08c8fe9bdf3152f16acf93bf699b8bc7a16da62f3fbc8e0808bf245d55595d0d9457f71faa3fd18652dab1ace466d0b9cb55abb2e5e302a6808fc1f5a05eb50a919c9005bb531265e4a0e332d2197ad74a5657ba89baf7ed18f6a75eda1b64c095e6d7094c0ee13bcd817535b569c70b9c7648c3fb626e9704f83025de31fc951cdd5fe00d66f6cd07698de79421c61b6adc1c939df339247570722d36051f216e31643455926859aea60fc74b4d250e862667cabaf6993908e080a204ddff08e977eac00c98eeb2c81c5ea1227dbf9333a1183767688"
n = int(n,16)
print "printing out n:"
n                                 #print statement
c1 = int(c1,16)
c2 = int(c2,16)
c1z = ZZ(c1)
c2z = ZZ(c2)
c1n = Integers(n)(c1z)
c2n = Integers(n)(c2z)
R.<x,y> = ZZ[]
f = x^3 - c1z
g = (x+y)^3 - c2z
h = f.resultant(g)

#acquire the values x from [0,63] s.t. x mod n == 0
b1b2 = []
for x in range(0,64):
    if Integers(n)(h(0,x)) == 0:
        b1b2.append(x)
#b1b2                          #41 is the only value     #printstatement
#f.gcd((x+41)^3 - c2binary)    #result is 1

P.<X> = Integers(n)[]
F = (X^e - c1n)
G = (X + b1b2[0])^e - c2n
r0 = F
r1 = G

def eea(rpast,rcurr,spast,scurr,tpast,tcurr):
    q = rpast.quo_rem(rcurr)
    r = q[1]
    if r == 0:
        return [scurr,tcurr,rcurr]
    else:
        q = q[0]
        s = spast - q*scurr
        t = tpast - q*tcurr
        return eea(rcurr,r,scurr,s,tcurr,t)

eea_out = eea(r0,r1,1,0,0,1)
#len(eea_out)                        #3
print "\nprinting out the polynomial to be solved:"
eea_out[2]                           #print statement
︡1b7a28b8-81e2-4409-9123-5ae32cc5624a︡︡{"stdout":"printing out n:\n","done":false}︡{"stdout":"22882666615238641957765965773896015412805494030774708877824860513331765418608118017568096831032227959390987945928482403163666226254035019159984847169688326161302067752267693392902295844263504421052573827850315084940896183043416006265083417556688015370062633664334335340123179458316192288335431034487347947690378607096793823426546646771111712736844540977756482374121970459722110058700579826193147522381649157969271423280337738568942238431438964611661781536724098386411156368632964837238260970449245907799980621324412298144700235350490368907146905980619101426676781230513369539179030462957708006637542489734586978661727L\n","done":false}︡{"stdout":"\nprinting out the polynomial to be solved:\n","done":false}︡{"stdout":"15837320062140447583099440976779418150988102731411125723050789866138581044830822189471404645133948446535000692720655681367237284703044945537284787138854807681837898184164866805190918803352499187119848181908777204908840486821291839337230528460160645801044688112551443664805633693972451065020791985638866583397801230539577239519982062858041549363381735170796749842746969914355115133325369802641806023821491834369590263375406511237330951054954920826568124595678293960018297178944308414539159370542990613685078539824883031869045289431938766675096219984237968699974042044995575755885461162335343330740660071907542306226125*X + 21362329153277560751060367949145626582183499029517276902584574663769098588344868421684619655650367135969731469913356847916806810915675313603702112379489667543192469528010398265285771973202969888828926018484828579842182101195188530308569067392563801310809448390149595974223633895981034522433811476148964286123337754024748358305559955954838269923224050875409633977829714706386525590064939572459344322689726557159578474241433654079192372363849303252896424406532715271559772292353285582337153611695621980835569083534249742863060293941089390338717389856071618253706048592660500562547369606592044665004729288936761976403072\n","done":false}︡{"done":true}
︠d348ec38-ac3b-44d4-a888-db888e9321bc︠
x_coef = 15837320062140447583099440976779418150988102731411125723050789866138581044830822189471404645133948446535000692720655681367237284703044945537284787138854807681837898184164866805190918803352499187119848181908777204908840486821291839337230528460160645801044688112551443664805633693972451065020791985638866583397801230539577239519982062858041549363381735170796749842746969914355115133325369802641806023821491834369590263375406511237330951054954920826568124595678293960018297178944308414539159370542990613685078539824883031869045289431938766675096219984237968699974042044995575755885461162335343330740660071907542306226125
poly_num = 21362329153277560751060367949145626582183499029517276902584574663769098588344868421684619655650367135969731469913356847916806810915675313603702112379489667543192469528010398265285771973202969888828926018484828579842182101195188530308569067392563801310809448390149595974223633895981034522433811476148964286123337754024748358305559955954838269923224050875409633977829714706386525590064939572459344322689726557159578474241433654079192372363849303252896424406532715271559772292353285582337153611695621980835569083534249742863060293941089390338717389856071618253706048592660500562547369606592044665004729288936761976403072
rootofpoly = Integers(n)(-poly_num/x_coef)
print "the root of the polynomial:"
rootofpoly
︡cfaaece3-9185-4a9c-b2d6-6914d61c0204︡︡{"stdout":"the root of the polynomial:\n","done":false}︡{"stdout":"13914397845631924886733116452942441148738404272529842557304914528684255675977968715561910527828547439639257897419639123463812331172113338272826604754655839318542026034942326351195259768776033118523410811340528190350957457842880871958488704909245526361718503300996499250776396276996193236689340699758052072343614615890655596542460274592603117032495296464354582474948535841139852968732382297906064006129598761040787023415080463343924177315668989619829682692505650309521272700728082144666437175043330737842484940795985569489402484599659189819649820363591911030732327218698666016377890295003553801260144092522720865428371\n","done":false}︡{"done":true}
︠fe6c7bca-4181-49e4-8fd8-90a42743d459︠
#generating list of tuples - min value of 0, max value of 63 - i.e. (0, 41), (1,42), ..., (22,63)
maxval63 = 63
listoftuples = []
for x21 in range(0,23):
    temptuple = (x21, x21 + 41)
    listoftuples.append(temptuple)
    
︡5778f725-183f-4a9a-a117-577e566daf61︡︡{"done":true}
︠759ac51b-5e8f-45f0-9fd6-8a6680a89254︠
#Integers(n)(-poly_num)                #doesnt work like in djao script cuz root in form ax - b
#rootofpoly.parent()                   #ring of ints mod n     #21.parent() #integer ring
t32 = Integers(n)(2)^(-6)              #some ugly number     #ring of ints mod n #reverse offset

loopcond = True
loopcounter = 0
while (loopcond == True):
    temptuple = listoftuples[loopcounter]
    #"decrypt"
    m1_left = Integers(n)(rootofpoly)
    m1_left = Integers(n)(m1_left - temptuple[0])
    m1_left = m1_left * t32
    
    m1_right = Integers(n)(rootofpoly)
    m1_right = Integers(n)(m1_right - temptuple[1])
    m1_right = m1_right * t32
    #encrypting for sanity check
    c1_left = m1_left
    c1_left = c1_left * Integers(n)(2)^6
    c1_left = c1_left + temptuple[0]
    c1_left = Integers(n)(c1_left)^e
    
    c1_right = m1_right
    c1_right = c1_right * Integers(n)(2)^6
    c1_right = c1_right + temptuple[0]
    c1_right = Integers(n)(c1_right)^e
    
    if(c1_left == c1n):
        print "success!!!!!!!!! c1_left == c1n"
        print "loop counter @ " + str(loopcounter)
        loopcond = False
    if(c1_left == c2n):
        print "success!!!!!!!!! c1_left == c2n"
        loopcond = False
    if(c1_right == c1n):
        print "success!!!!!!!!! c1_right == c1n"
        loopcond = False
    if(c1_right == c2n):
        print "success!!!!!!!!! c1_right == c2n"
        loopcond = False
    elif(loopcounter == 22):
        print "failure :("
        loopcond = False
    loopcounter = loopcounter + 1

#end
print "loop safely exited"

︡2e2e63b6-c214-4739-b6d8-80277fdadf92︡︡{"stdout":"success!!!!!!!!! c1_left == c1n\nloop counter @ 0\n","done":false}︡{"stdout":"loop safely exited\n","done":false}︡{"done":true}
︠e3639325-1050-4b3a-92c9-2c2a27516ba7︠

c1_left
c1n
print "\nm is:"
m1_left
︡44d7c033-9e41-49fc-ae0b-0ce416303c39︡︡{"stdout":"15787546756123347074841525219778691611469109905867834787078856224502041131834962337030694824824585337824878506394232310936451303880532494167167030018113002340515737489260864508955432417249696070834513358764758567122243430434326244817481792441490181948237348925271273972440768400634240461776648147277944225278170006756399524171574869998809588283461036454618093693203632596717055704612293305021034372078582972765363425777031542258505787326167881207663913272380183960024734429919014538705141309519140092075629423377914894847089899864132243196744770208744707847661664477921979621519636626390118973754482454891612828246534\n","done":false}︡{"stdout":"15787546756123347074841525219778691611469109905867834787078856224502041131834962337030694824824585337824878506394232310936451303880532494167167030018113002340515737489260864508955432417249696070834513358764758567122243430434326244817481792441490181948237348925271273972440768400634240461776648147277944225278170006756399524171574869998809588283461036454618093693203632596717055704612293305021034372078582972765363425777031542258505787326167881207663913272380183960024734429919014538705141309519140092075629423377914894847089899864132243196744770208744707847661664477921979621519636626390118973754482454891612828246534\n","done":false}︡{"stdout":"\nm is:\n","done":false}︡{"stdout":"18452037425356291636449958920650612925028415622531874926974575011071942062890499806430232014226127708884056924058941276325168591720748426803625840787636882399139804396884292021706442934784605603003198062995415586286510356141517143616839734379692723597420512815344493774954039822673781249090567554040824959446139430903549071739005300936239069790805732598905237243049516082608866655663468022402446681993651653398025462667379767661874661520610252887727820954147416687757660117203270138184652291686794875556898384817828324607329913866791687563814719146486970059238252655857508008039194436028854095933981422952916512143382\n","done":false}︡{"done":true}











