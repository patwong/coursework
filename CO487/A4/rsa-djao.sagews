︠cae1f34e-5d54-4ce5-b5a9-c18b3025bcd4s︠
p = 131
q = 137
n = p*q
n
phi_n = (p-1)*(q-1)
e = 3
d = 1/(Integers(phi_n)(e))
d
︡ba11dfd8-5fe4-4f1e-9fd0-9021a9797986︡︡{"stdout":"17947\n","done":false}︡{"stdout":"11787\n","done":false}︡{"done":true}
︠2f454e74-2b7f-4d5b-8b4f-b7bcce441386s︠
m = 827
m.gcd(n)
︡ffa3a75c-84b7-410a-ac2d-017f3605c7a4︡︡{"stdout":"1\n","done":false}︡{"done":true}
︠d55cb20d-60f1-4d70-853c-b9cb0f56d9d2s︠
m.binary()
m1 = m*4 + 1
m2 = m*4 + 3
m1
m2
m1.binary()
m2.binary()
︡a08b176d-5bc6-4c10-bd63-b50392e83c32︡︡{"stdout":"'1100111011'\n","done":false}︡{"stdout":"3309\n","done":false}︡{"stdout":"3311\n","done":false}︡{"stdout":"'110011101101'\n","done":false}︡{"stdout":"'110011101111'\n","done":false}︡{"done":true}
︠2c57e7e1-8918-4d54-b128-1be8e7c082a9s︠
c1 = Integers(n)(m1)^e
c2 = Integers(n)(m2)^e
c1
c2
︡1adfc661-ba95-4dde-9ef5-72bb43dd9787︡︡{"stdout":"16248\n","done":false}︡{"stdout":"12989\n","done":false}︡{"done":true}
︠8a0f6be2-dfcc-45b0-8679-057c6e6cec3as︠
R.<x,y> = ZZ[]
f = x^3 - ZZ(c1)
g = (x+y)^3 - ZZ(c2)
f.gcd((x+2)^3 - ZZ(c2))
︡3c3b8211-b98a-4c73-8cec-fadbfc09d641︡︡{"stdout":"1\n","done":false}︡{"done":true}
︠e7a62f98-8379-4ba3-a1b7-dede60fdc038s︠
P.<X> = Integers(n)[]
F = (X^3 - c1)
F.gcd((X+2)^3 - c2)
F.gcd((X+2)^3 - c2)(m1)
F.gcd((X+2)^3 - c2).roots(multiplicities=False)
print "debug starts here"
#Integers(n)(-14638)                    #3309
rootofpoly = Integers(n)(-14638)      #golden up to here
message_to_e = Integers(n)(rootofpoly)^d
message_to_e = ZZ(message_to_e)
t3 = (2)^(-2)
b11 = message_to_e                    #ZZ(rootofpoly)
rop1 = message_to_e * t3                #should give m
b11 = b11 & 2
#rop1
#b11
mp1 = 827 * Integers(n)(2)^2
mp1
mp1 = mp1 + 1 #!!!!!!!3309!!!!!! #from here, remove last 2 bits
mp1
print "undo op starts here"
mp1 = mp1 - 1
mp1 = mp1 * Integers(n)(2)^(-2)  #so this works - figure out how to remove last two bits mod n
mp1
mp1_2 = mp1 * Integers(n)(2)^2
pos_c1 = Integers(n)(mp1_2 + 1)^e
c1 == pos_c1
#mp1 = Integers(n)(mp1)^e
#mp1
︡54c45536-0aac-41f9-847c-0e374ee3f266︡︡{"stdout":"X + 14638\n","done":false}︡{"stdout":"0\n","done":false}︡{"stdout":"[3309]\n","done":false}︡{"stdout":"debug starts here\n","done":false}︡{"stdout":"3308\n","done":false}︡{"stdout":"3309\n","done":false}︡{"stdout":"undo op starts here\n","done":false}︡{"stdout":"827\n","done":false}︡{"stdout":"True\n","done":false}︡{"done":true}
︠1d911db7-3c5a-40ec-8137-c068123b47b8︠
rootofpoly = Integers(n)(-14638)
rootofpoly = Integers(n)(rootofpoly - 1)
rootofpoly = rootofpoly * Integers(n)(2)^(-2)
rootofpoly
m69420 = m
m69420 = m69420 * Integers(n)(2)^2
m69420 = m69420 + 1
m69420

︡42bff9c2-374d-462f-b39b-4538020a9914︡︡{"stdout":"827\n","done":false}︡{"stdout":"3309\n","done":false}︡{"done":true}
︠5af831d0-fbe5-48f7-a7de-cf8ef884c5a1︠
#example poly
F49 = 3*X + 30
F49.roots(multiplicities=False)
Integers(n)(-30/3)
︡f6d81d66-3b12-4be3-b7ff-e91d87b7456c︡︡{"stdout":"[17937]\n","done":false}︡{"stdout":"17937\n","done":false}︡{"done":true}
︠56f01be9-395d-4e8b-be80-fe67b56ed81ds︠
c54 = int("ff",16)
#ZZ(c54)
n = "b54400b5a0478403640d99116d42ff700732f863c6947417d6e4adbb8fbe139ca6fb6aedbc4d9ac4cdddc9de29fa2e581bd6a2b40f3488ec67b30bf5b74e62cd77af6f507a486d0c38256b52cfb1313b3f19c2ef10fa00dd91b9f50e137dc0efbc21d7d2dd6b45361b340e77e02703ab1cbee71c22975272c31b9db17c24f42f18fcfa55d96f6fb90ac3e62171ff622edcc550fd3d113f743ee9aad57dc4d6dcbee1c2caa3061991ebc6cdb6fdba77ae445d25f858669bca4176c8982149a27fe863c0110b1c55dcfe47d512fc2cf0bdd6959590318f4b09e1fc4b351f9b814a9a651414b674b3e81d5f1989874197c2e5cc83b06cd85e49d7440adb1aedf55f"
#c1, c2 are (m||ri)^e mod n
c1 = "7d0fbbdb918767a649a4adb65a951961a37e6438027b7d548ae7e663953c3be77b2a6de3e6a8df24b9d4ad233f2261f27f7971e69ce96236166c5153a145b053219ce556b17a19e2c69ab94a09215e95a89e0845224fc88b87c5125a782c15867a3b2aa1e56a6aea569ce8c5931b457f5590961232e1427b7acb8f1fa1ef893cb35f0368401f3eb4290dfac19e369ef2842be0f85cc56f02f59e638b4e8c4c0a3d523ccd904598a9a2d7ad9e18baaf3ae4ca71fe8daa468985d5ad0bc415748b5579f6f161568dfeda86baeb9cb48d2a8019f3d0cf5d9fa8532b6bbc97ce5a066977ce7d142c3acb1fa061120dcd176d1cf10c13df6e9ac46ae3765f3c76a206"
c2 = "9489dd06d49667973c434d00cab3c280de43f8fa45cea3a9b4f44ecd6eed669577c27e7e66c2bd13b8b08c8fe9bdf3152f16acf93bf699b8bc7a16da62f3fbc8e0808bf245d55595d0d9457f71faa3fd18652dab1ace466d0b9cb55abb2e5e302a6808fc1f5a05eb50a919c9005bb531265e4a0e332d2197ad74a5657ba89baf7ed18f6a75eda1b64c095e6d7094c0ee13bcd817535b569c70b9c7648c3fb626e9704f83025de31fc951cdd5fe00d66f6cd07698de79421c61b6adc1c939df339247570722d36051f216e31643455926859aea60fc74b4d250e862667cabaf6993908e080a204ddff08e977eac00c98eeb2c81c5ea1227dbf9333a1183767688"
n = int(n,16)
n                                 #print statement
c1 = int(c1,16)
c2 = int(c2,16)
c1z = ZZ(c1)
c2z = ZZ(c2)
c1z
c1zn = Integers(n)(c1z)
c1zn
#c1z.parent()
#c1zn.parent()
#c2z
c2zn = Integers(n)(c2z)
#c2zn
#c2z.parent()
#c2zn.parent()
︡27d9d2e6-a6bc-486d-942b-e0d631ecc2ff︡︡{"stdout":"22882666615238641957765965773896015412805494030774708877824860513331765418608118017568096831032227959390987945928482403163666226254035019159984847169688326161302067752267693392902295844263504421052573827850315084940896183043416006265083417556688015370062633664334335340123179458316192288335431034487347947690378607096793823426546646771111712736844540977756482374121970459722110058700579826193147522381649157969271423280337738568942238431438964611661781536724098386411156368632964837238260970449245907799980621324412298144700235350490368907146905980619101426676781230513369539179030462957708006637542489734586978661727L\n","done":false}︡{"stdout":"15787546756123347074841525219778691611469109905867834787078856224502041131834962337030694824824585337824878506394232310936451303880532494167167030018113002340515737489260864508955432417249696070834513358764758567122243430434326244817481792441490181948237348925271273972440768400634240461776648147277944225278170006756399524171574869998809588283461036454618093693203632596717055704612293305021034372078582972765363425777031542258505787326167881207663913272380183960024734429919014538705141309519140092075629423377914894847089899864132243196744770208744707847661664477921979621519636626390118973754482454891612828246534\n","done":false}︡{"stdout":"15787546756123347074841525219778691611469109905867834787078856224502041131834962337030694824824585337824878506394232310936451303880532494167167030018113002340515737489260864508955432417249696070834513358764758567122243430434326244817481792441490181948237348925271273972440768400634240461776648147277944225278170006756399524171574869998809588283461036454618093693203632596717055704612293305021034372078582972765363425777031542258505787326167881207663913272380183960024734429919014538705141309519140092075629423377914894847089899864132243196744770208744707847661664477921979621519636626390118973754482454891612828246534\n","done":false}︡{"done":true}
︠913c1f6a-f961-4eeb-8a63-f939166f246f︠









