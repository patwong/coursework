︠e33629de-1571-49b4-93b6-a14d4f6344ad︠
e = 3
n = "b54400b5a0478403640d99116d42ff700732f863c6947417d6e4adbb8fbe139ca6fb6aedbc4d9ac4cdddc9de29fa2e581bd6a2b40f3488ec67b30bf5b74e62cd77af6f507a486d0c38256b52cfb1313b3f19c2ef10fa00dd91b9f50e137dc0efbc21d7d2dd6b45361b340e77e02703ab1cbee71c22975272c31b9db17c24f42f18fcfa55d96f6fb90ac3e62171ff622edcc550fd3d113f743ee9aad57dc4d6dcbee1c2caa3061991ebc6cdb6fdba77ae445d25f858669bca4176c8982149a27fe863c0110b1c55dcfe47d512fc2cf0bdd6959590318f4b09e1fc4b351f9b814a9a651414b674b3e81d5f1989874197c2e5cc83b06cd85e49d7440adb1aedf55f"
#c1, c2 are (m||ri)^e mod n
c1 = "7d0fbbdb918767a649a4adb65a951961a37e6438027b7d548ae7e663953c3be77b2a6de3e6a8df24b9d4ad233f2261f27f7971e69ce96236166c5153a145b053219ce556b17a19e2c69ab94a09215e95a89e0845224fc88b87c5125a782c15867a3b2aa1e56a6aea569ce8c5931b457f5590961232e1427b7acb8f1fa1ef893cb35f0368401f3eb4290dfac19e369ef2842be0f85cc56f02f59e638b4e8c4c0a3d523ccd904598a9a2d7ad9e18baaf3ae4ca71fe8daa468985d5ad0bc415748b5579f6f161568dfeda86baeb9cb48d2a8019f3d0cf5d9fa8532b6bbc97ce5a066977ce7d142c3acb1fa061120dcd176d1cf10c13df6e9ac46ae3765f3c76a206"
c2 = "9489dd06d49667973c434d00cab3c280de43f8fa45cea3a9b4f44ecd6eed669577c27e7e66c2bd13b8b08c8fe9bdf3152f16acf93bf699b8bc7a16da62f3fbc8e0808bf245d55595d0d9457f71faa3fd18652dab1ace466d0b9cb55abb2e5e302a6808fc1f5a05eb50a919c9005bb531265e4a0e332d2197ad74a5657ba89baf7ed18f6a75eda1b64c095e6d7094c0ee13bcd817535b569c70b9c7648c3fb626e9704f83025de31fc951cdd5fe00d66f6cd07698de79421c61b6adc1c939df339247570722d36051f216e31643455926859aea60fc74b4d250e862667cabaf6993908e080a204ddff08e977eac00c98eeb2c81c5ea1227dbf9333a1183767688"
n = int(n,16)
n
c1 = int(c1,16)
c2 = int(c2,16)
c1binary = ZZ(c1)
c2binary = ZZ(c2)
R.<x,y> = ZZ[]
f = x^3 - c1binary
g = (x+y)^3 - c2binary
h = f.resultant(g)
︡183f2361-b402-48fd-a893-e81b1297c100︡︡{"stdout":"22882666615238641957765965773896015412805494030774708877824860513331765418608118017568096831032227959390987945928482403163666226254035019159984847169688326161302067752267693392902295844263504421052573827850315084940896183043416006265083417556688015370062633664334335340123179458316192288335431034487347947690378607096793823426546646771111712736844540977756482374121970459722110058700579826193147522381649157969271423280337738568942238431438964611661781536724098386411156368632964837238260970449245907799980621324412298144700235350490368907146905980619101426676781230513369539179030462957708006637542489734586978661727L\n","done":false}︡{"done":true}
︠65d66503-c7ab-4ddb-8b80-f8705d0f8059︠
Integers(n)(h(0,2))
︡ca0fd8f0-0c81-4b48-940c-1698a012ba0a︡︡{"stdout":"4350348791332252001510548761939509240532320699066842005554355106775802302990589840506829327587323163308479908071755972267455562411052378949350495634971435725136497507643287264374413522693077673277630149779699625782765577456539250663010926926710346466491907065676255435889150445904082562740933262319722501438688306536409861602297621730382216916316688091231027083142759893072905986677388954156249008077415738492951088866177682590768155991440044834286175200360768885786197262284251190461489498312883654333031460950305704621826655733743980185629573139820171880448774569184411795822545454672043547604908275981029817596565\n","done":false}︡{"done":true}
︠81ca1533-b03a-4c6d-96a0-4120f741e529︠
h.parent()
︡e8e4b84f-0a51-4773-9081-08064b032a72︡︡{"stdout":"Multivariate Polynomial Ring in x, y over Integer Ring\n","done":false}︡{"done":true}
︠110aeddd-9549-43c4-adcc-145ae86a46ca︠
b1b2 = []
for x in range(0,63):
    if Integers(n)(h(0,x)) == 0:
        b1b2.append(x)
#b1b2                          #41 is the only value
#f.gcd((x+41)^3 - c2binary)    #result is 1

P.<X> = Integers(n)[]
F = (X^e - c1)
G = (X + 41)^e - c2
r0 = F
r1 = G

#r = 0 when gcd between ints, not polynomials
#when does it stop? when remainder = 0
#def eea(rpast,rcurr,spast,scurr,tpast,tcurr):
#    q = rpast.quo_rem(rcurr)
#    r = q[1]
#    if r == 0:
#        return [scurr,tcurr,rcurr]
#    else:
#        q = q[0]
#        s = spast - q*scurr
#        t = tpast - q*tcurr
#        return eea(rcurr,r,scurr,s,tcurr,t)
#
#eea_out = eea(r0,r1,1,0,0,1)
#len(eea_out)
#eea_out[2]
#eea_out[3].roots(multiplicities=False)
#eea_out = eea(X^3+1,X^3,1,0,0,1)
#(X^3).quo_rem(X^3)
#q21 = G.quo_rem(F)
#r21 = q21[1]
#F.quo_rem(r21)
#z[0]
#z[1]
#F.gcd((X+41)^3 - c2) #will not work

︡92d50380-23e9-48c4-94cf-cc2a555605ba︡︡{"done":true}
︠31c66235-f122-4984-a725-6305ec229767︠

def eea(rpast,rcurr,spast,scurr,tpast,tcurr):
    q = rpast.quo_rem(rcurr)
    r = q[1]
    if r == 0:
        return [scurr,tcurr,rcurr]
    else:
        q = q[0]
        s = spast - q*scurr
        t = tpast - q*tcurr
        return eea(rcurr,r,scurr,s,tcurr,t)

eea_out = eea(r0,r1,1,0,0,1)
len(eea_out)
eea_out[2]
#eea_out[2].roots(multiplicities=False)                #slow

#eea_out = eea(X^3+1,X^3,1,0,0,1)
#(X^3).quo_rem(X^3)
#q21 = G.quo_rem(F)
#r21 = q21[1]
#F.quo_rem(r21)
#z[0]
#z[1]
#F.gcd((X+41)^3 - c2) #will not work-
︡2297f6a1-d890-447c-956f-a8ffb1e11389︡︡{"stdout":"3\n","done":false}︡{"stdout":"15837320062140447583099440976779418150988102731411125723050789866138581044830822189471404645133948446535000692720655681367237284703044945537284787138854807681837898184164866805190918803352499187119848181908777204908840486821291839337230528460160645801044688112551443664805633693972451065020791985638866583397801230539577239519982062858041549363381735170796749842746969914355115133325369802641806023821491834369590263375406511237330951054954920826568124595678293960018297178944308414539159370542990613685078539824883031869045289431938766675096219984237968699974042044995575755885461162335343330740660071907542306226125*X + 21362329153277560751060367949145626582183499029517276902584574663769098588344868421684619655650367135969731469913356847916806810915675313603702112379489667543192469528010398265285771973202969888828926018484828579842182101195188530308569067392563801310809448390149595974223633895981034522433811476148964286123337754024748358305559955954838269923224050875409633977829714706386525590064939572459344322689726557159578474241433654079192372363849303252896424406532715271559772292353285582337153611695621980835569083534249742863060293941089390338717389856071618253706048592660500562547369606592044665004729288936761976403072\n","done":false}︡{"done":true}
︠9623146b-7eb5-4820-89d8-633ff3cbe1ac︠1-
#n #this is correct
︡fbef0cac-0cd6-4816-998e-aea9b6301bf5︡︡{"stdout":"13914397845631924886733116452942441148738404272529842557304914528684255675977968715561910527828547439639257897419639123463812331172113338272826604754655839318542026034942326351195259768776033118523410811340528190350957457842880871958488704909245526361718503300996499250776396276996193236689340699758052072343614615890655596542460274592603117032495296464354582474948535841139852968732382297906064006129598761040787023415080463343924177315668989619829682692505650309521272700728082144666437175043330737842484940795985569489402484599659189819649820363591911030732327218698666016377890295003553801260144092522720865428371\n","done":false}︡{"done":true}
︠019e9321-c568-4763-b8a6-7cfdcb8ea861︠
eea_out[2].roots(multiplicities=False)
︠︠

x_coef = 15837320062140447583099440976779418150988102731411125723050789866138581044830822189471404645133948446535000692720655681367237284703044945537284787138854807681837898184164866805190918803352499187119848181908777204908840486821291839337230528460160645801044688112551443664805633693972451065020791985638866583397801230539577239519982062858041549363381735170796749842746969914355115133325369802641806023821491834369590263375406511237330951054954920826568124595678293960018297178944308414539159370542990613685078539824883031869045289431938766675096219984237968699974042044995575755885461162335343330740660071907542306226125
poly_num = 21362329153277560751060367949145626582183499029517276902584574663769098588344868421684619655650367135969731469913356847916806810915675313603702112379489667543192469528010398265285771973202969888828926018484828579842182101195188530308569067392563801310809448390149595974223633895981034522433811476148964286123337754024748358305559955954838269923224050875409633977829714706386525590064939572459344322689726557159578474241433654079192372363849303252896424406532715271559772292353285582337153611695621980835569083534249742863060293941089390338717389856071618253706048592660500562547369606592044665004729288936761976403072
rootofpoly = Integers(n)(-poly_num/x_coef)
rootofpoly

#b11 = ZZ(rootofpoly)                   #will use to get b1
#rop1 = rootofpoly * t32                #should give m
#b11 = b11 & 63
#b11                                    #19?









